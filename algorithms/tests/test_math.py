import unittest
from ..math.extended_gcd import extended_gcd
from ..math.inverse_matrix import inverseMatrix


class TestExtendedGCD(unittest.TestCase):

    def test_extended_gcd(self):
        # Find extended_gcd of 35 and 77
        (a, b) = extended_gcd(35, 77)
        self.assertIs(35 * a + 77 * b, 7)

        # Find extended_gcd of 15 and 19
        (a, b) = extended_gcd(15, 19)
        self.assertIs(15 * a + 19 * b, 1)

        # Find extended_gcd of 18 and 9
        (a, b) = extended_gcd(18, 9)
        self.assertIs(18 * a + 9 * b, 9)

        # Find extended_gcd of 99 and 81
        (a, b) = extended_gcd(99, 81)
        self.assertIs(99 * a + 81 * b, 9)

        # Find extended_gcd of 50 and 15
        (a, b) = extended_gcd(50, 15)
        self.assertIs(50 * a + 15 * b, 5)

class TestInverseMatrix(unittest.TestCase):

    def test_inverse_matrix(self):
        # matrices
        self.a = ([1])
        im1 = inverseMatrix(self.a)
        b = ([3],[7])
        im2 = inverseMatrix(b)
        c = ([4,5],[1,9])
        im3 = inverseMatrix(c)
        d = ([1,2,9],[3,4,8],[7,2,6])
        im4 = inverseMatrix(d)
        e = ([0,1,4,9],[1,2,10,78],[0,0,1,0],[7,8,4,1])
        im5 = inverseMatrix(e)
        f = ([1,4,1,9,1],[10,1,9,-9,-4],[10,8,9,1,-2],[1,2,7,4,9],[1,0,7,4,0])
        im6 = inverseMatrix(f)
        g = ([-20,33,-7,80,75,-60,-98,-81],
             [19,-69,-45,-32,-35,-68,7,-72],
             [86,-27,-50,36,-87,91,-21,-8],
             [-65,-12,-74,-62,-3,43,-89,-23],
             [79,-67,-57,-39,-31,57,-14,-63],
             [27,55,47,-75,53,-79,62,0],
             [-59,-51,-85,-5,-99,14,88,26],
             [5,28,-15,18,-40,21,46,68])
        im7 = inverseMatrix(g)
        self.assertEqual(im1,"Matrix is not square")
        self.assertEqual(im2,"Matrix is not square")
        self.assertEqual(im3,([0.2903225806451613, -0.16129032258064516], [-0.03225806451612903, 0.12903225806451613]))
        self.assertEqual(im4,([-0.07017543859649122, -0.05263157894736842, 0.17543859649122806], 
                              [-0.3333333333333333, 0.5, -0.16666666666666666], 
                              [0.19298245614035087, -0.10526315789473684, 0.017543859649122806]))
        self.assertEqual(im5,([-1.2668024439918533, 0.1446028513238289, 3.1323828920570267, 0.12219959266802444], 
                              [1.109979633401222, -0.12830957230142567, -3.230142566191446, 0.018329938900203666], 
                              [0.0, 0.0, 1.0, 0.0], 
                              [-0.012219959266802444, 0.014256619144602852, -0.0855397148676171, -0.002036659877800407]))
        self.assertEqual(im6,([0.45009922540170283, 0.35016964342871776, -0.27968760002560655, 0.043467127584661674, -0.19838678701747647], 
                              [-0.35144997119262533, -0.3105434991357788, 0.3451123487612829, -0.02227770309199155, 0.028039178029575573], 
                              [-0.1959541642660521, -0.1092119582613149, 0.11209269573010691, -0.0018564752576659626, 0.16900326483579797], 
                              [0.2303949811151655, 0.10357851610012163, -0.12624031752128545, -0.007617950195249984, 0.003840983291722681], 
                              [0.07809999359836119, 0.0690096664746175, -0.07669163305806287, 0.11606171179822035, -0.11734203956212791]))
        self.assertEqual(im7,([0.0004080523675717536, 0.005284446448899408, -0.003108806146463461, -0.0016691229107057392, 0.007214306086258196, -0.0015930674500150854, -0.007888936277864604, 0.01485126083286582], 
                              [0.004870315312820999, -0.0077948488769190895, 0.01653392968153249, 0.00400291255246094, -0.01022037412361287, 0.015158001892488705, 0.007797639254400636, -0.011603196221218226], 
                              [-0.0073912404773823085, -0.002069974039141789, 0.011372724869749044, -0.0026015283417882705, -0.014530663862490913, 0.0022766444372875785, 0.000807642416367194, -0.024309007184585122], 
                              [0.004749258286012592, -0.0016441121163979625, -0.0019445063714552215, -0.005173845903845761, 0.002050425022730488, -0.00462540267609065, 0.0016274905872675155, 0.003215020046902025], 
                              [0.0046810518852422964, -0.004044299912731249, -0.021197290901111308, -0.0030917210090638967, 0.020787248096768636, -0.006967515715239455, -0.004159019028203315, 0.018603217991181267], 
                              [-0.00013356517035003634, -0.012749352206609336, 0.003857192236925741, -0.0006956642889086403, 0.0031892107935673625, 0.002497313857958152, 0.006637787922106441, -0.013023192417702082], 
                              [0.0026782341835939675, -0.008594095543988687, -0.0012517711095336684, -0.005354141094581874, 0.005714207972172259, 0.005193247669203204, 0.009887854440762893, -0.006354212317069255], 
                              [-0.003939943755354234, 0.010171628509857348, -0.01636948844999275, 0.0012882494747399086, 0.007307268634842114, -0.012780667844422201, -0.014068603291568574, 0.03144172424148453]))
